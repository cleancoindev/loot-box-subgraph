
type Lootbox @entity{
  id: ID! # loot box address as unique (address external erc's are sent to)
  erc721: Bytes! #address the lootbox is controlled by 
  tokenId: BigInt! #tokenId (combined with the erc721 to get id, need both because cant reverse)
  erc20Balances: [ERC20Balance!]! @derivedFrom(field:"address") 
  erc721Token: [ERC721Token!]! @derivedFrom(field: "owner") 
  erc1155Balances: [ERC1155Balance!]! @derivedFrom(field: "address")
}

type ERC20 @entity{
  id: ID! # address of erc20
  name: String
  symbol: String
  decimals: BigInt
  balances: [ERC20Balance!]! @derivedFrom(field: "token")

}

type ERC20Balance @entity{
  id: ID! # composite string : lootbox.id + erc20.id
  balance: BigInt!
  address: Lootbox!
  token: ERC20!
}


type ERC721 @entity{
  id: ID!
  name: String!
  uri: String!
  tokens: [ERC721Token!]! @derivedFrom(field: "token")
}


type ERC721Token @entity{

  id: ID! # composite string : lootbox.id + erc721.id
  tokenId: BigInt!
  owner: Lootbox #address (was bytes)
  token: ERC721!

}

type ERC1155 @entity{
  id: ID!
  tokenIds: [ERC1155Balance!]! @derivedFrom(field: "token")
}

type ERC1155Balance @entity{

  id: ID!
  tokenId: BigInt!
  address: [Lootbox!]!
  token: ERC1155!
  balance: BigInt!
}