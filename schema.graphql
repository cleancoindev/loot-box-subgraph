
type LootBox @entity{
  id: ID! # loot box address as unique (address external erc's are sent to)
  erc721: Bytes! #address the lootbox is controlled by 
  tokenId: BigInt! #tokenId (combined with the erc721 to get id, need both because cant reverse)
  erc20Balances: [ERC20Balance!]! @derivedFrom(field:"lootbox") 
  erc721Tokens: [ERC721Token!]! @derivedFrom(field: "lootbox") 
  erc1155Balances: [ERC1155Balance!]! @derivedFrom(field: "lootbox")
}

type ERC20 @entity{
  id: ID! # address of erc20
  name: String
  symbol: String
  decimals: BigInt
  balances: [ERC20Balance!]! @derivedFrom(field: "erc20")

}

type ERC20Balance @entity{
  id: ID! # composite string : lootbox.id + erc20.id
  balance: BigInt!
  lootbox: LootBox!
  erc20: ERC20!
}

type ERC721 @entity{
  id: ID!
  isLootBox: Boolean!
  name: String!
  uri: String!
  erc721Tokens: [ERC721Token!]! @derivedFrom(field: "erc721")
}

type ERC721Token @entity{
  id: ID! # composite string : lootbox.id + erc721.id
  tokenId: BigInt!
  lootbox: LootBox #address (was bytes)
  erc721: ERC721!
}

type ERC1155 @entity{
  id: ID!
  erc1155Balances: [ERC1155Balance!]! @derivedFrom(field: "erc1155")
}

type ERC1155Balance @entity{
  id: ID!
  tokenId: BigInt!
  lootbox: LootBox!
  erc1155: ERC1155!
  balance: BigInt!
}